# Generated by Django 3.0.3 on 2020-06-25 08:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomGoal',
            fields=[
                ('goal_id', models.AutoField(primary_key=True, serialize=False)),
                ('goal_description', models.TextField()),
                ('start_date', models.DateField()),
                ('date', models.DateField()),
                ('is_met', models.BooleanField(db_column='is_met')),
                ('checkin_interval', models.IntegerField()),
                ('act_frequency', models.IntegerField()),
                ('act_period_length', models.IntegerField()),
                ('pass_interval', models.IntegerField()),
                ('group_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'custom_goal',
                'db_table': 'custom_goal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExerciseDictionary',
            fields=[
                ('exercise_id', models.AutoField(db_column='exercise_id', primary_key=True, serialize=False)),
                ('activity', models.CharField(blank=True, max_length=150, null=True)),
                ('specific_motion', models.CharField(blank=True, db_column='specific_motion', max_length=150, null=True)),
                ('met_value', models.FloatField(blank=True, db_column='met_value', null=True)),
            ],
            options={
                'verbose_name_plural': 'exercise_dictionary',
                'db_table': 'exercise_dictionary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FoodDictionary',
            fields=[
                ('food_id', models.AutoField(db_column='food_id', primary_key=True, serialize=False)),
                ('food_name', models.CharField(blank=True, db_column='food_name', max_length=150, unique=True)),
                ('calories', models.FloatField()),
            ],
            options={
                'verbose_name_plural': 'food_dictionary',
                'db_table': 'food_dictionary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('height', models.DecimalField(decimal_places=1, max_digits=4)),
                ('weight', models.DecimalField(decimal_places=1, max_digits=4)),
                ('waist_circumference', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True)),
                ('profile_picture', models.ImageField(blank=True, upload_to='profile_image')),
                ('gender', models.TextField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Prefer Not To Say', 'Other')], default='Prefer Not To Say')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'user_profiles',
                'db_table': 'user_profile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserFood',
            fields=[
                ('consumption_id', models.AutoField(db_column='consumption_id', primary_key=True, serialize=False)),
                ('calorie_eaten_per_food', models.FloatField()),
                ('date_intake', models.DateField(auto_now_add=True)),
                ('meal_category', models.TextField(choices=[('Breakfast', 'Breakfast'), ('Lunch', 'Lunch'), ('Dinner', 'Dinner')])),
                ('food_amount', models.IntegerField()),
                ('food_id', models.ForeignKey(db_column='food_id', on_delete=django.db.models.deletion.CASCADE, to='health_tracker.FoodDictionary')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'user_foods',
                'db_table': 'user_food',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserExercise',
            fields=[
                ('activity_id', models.AutoField(db_column='activity_id', primary_key=True, serialize=False)),
                ('calories_burnt', models.FloatField(db_column='calories_burnt')),
                ('activity_date', models.DateField(auto_now_add=True, db_column='activity_date', null=True)),
                ('duration', models.IntegerField(db_column='duration')),
                ('exercise_id', models.ForeignKey(db_column='exercise_id', on_delete=django.db.models.deletion.CASCADE, to='health_tracker.ExerciseDictionary')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'user_exercises',
                'db_table': 'user_exercise',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserCustomGoal',
            fields=[
                ('user_custom_goal', models.AutoField(primary_key=True, serialize=False)),
                ('goal_id', models.ForeignKey(db_column='goal_id', on_delete=django.db.models.deletion.CASCADE, to='health_tracker.CustomGoal')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'user_custom_goals',
                'db_table': 'user_custom_goal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post',
                'ordering': ['-date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=200)),
                ('code', models.CharField(max_length=200)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invitation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_type', models.TextField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed')])),
                ('group_description', models.TextField(blank=True)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name_plural': 'groups',
                'db_table': 'groups',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='fooddictionary',
            name='UserFood',
            field=models.ManyToManyField(through='health_tracker.UserFood', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='exercisedictionary',
            name='UserExercise',
            field=models.ManyToManyField(through='health_tracker.UserExercise', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DailyWaterIntake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('cups_of_water', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'daily_water_intake',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DailyUserExerciseNotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_date', models.DateField(auto_now_add=True, db_column='activity_date', null=True)),
                ('note_value', models.TextField(blank=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'daily_user_exercise_notes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CustomGoalProgress',
            fields=[
                ('custom_goal_progress', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(null=True)),
                ('user_custom_goal', models.ForeignKey(db_column='user_custom_goal', on_delete=django.db.models.deletion.CASCADE, to='health_tracker.UserCustomGoal')),
            ],
            options={
                'verbose_name_plural': 'custom_goal_progress',
                'db_table': 'custom_goal_progress',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='health_tracker.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment',
                'ordering': ['date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BasicGoalProgress',
            fields=[
                ('basic_goal_progress_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(null=True)),
                ('weight', models.FloatField()),
                ('user_id', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'basic_goal_progress',
                'db_table': 'basic_goal_progress',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BasicGoal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_weight', models.FloatField()),
                ('date', models.DateField()),
                ('is_met', models.BooleanField(db_column='is_met')),
                ('metric', models.TextField(choices=[('Weight', 'Weight'), ('WaistCircumference', 'Waistcircumference')])),
                ('user_id', models.OneToOneField(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'basic_goal',
                'db_table': 'basic_goal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Usergroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_admin', models.BooleanField(db_column='is_admin')),
                ('group_id', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'user_groups',
                'db_table': 'user_groups',
                'managed': True,
                'unique_together': {('user_id', 'group_id')},
            },
        ),
        migrations.AddConstraint(
            model_name='userfood',
            constraint=models.CheckConstraint(check=models.Q(calorie_eaten_per_food__gte=0), name='calorie_eaten_per_food_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='userfood',
            unique_together={('meal_category', 'user_id', 'food_id', 'date_intake')},
        ),
        migrations.AlterUniqueTogether(
            name='usercustomgoal',
            unique_together={('user_id', 'goal_id')},
        ),
        migrations.AddConstraint(
            model_name='fooddictionary',
            constraint=models.CheckConstraint(check=models.Q(calories__gt=0), name='calories_per_food_constraint'),
        ),
        migrations.AddConstraint(
            model_name='dailywaterintake',
            constraint=models.CheckConstraint(check=models.Q(cups_of_water__gte=0), name='cups_of_water_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='dailywaterintake',
            unique_together={('user_id', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='customgoalprogress',
            unique_together={('user_custom_goal', 'date')},
        ),
        migrations.AddConstraint(
            model_name='basicgoalprogress',
            constraint=models.CheckConstraint(check=models.Q(weight__gte=0), name='weight_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='basicgoalprogress',
            unique_together={('user_id', 'date')},
        ),
    ]
